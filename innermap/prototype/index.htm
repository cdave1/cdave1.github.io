
<html>

<head>
<title>Ray Tracer Test Proof of Concept</title>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">

<script type="text/javascript" src="glMatrix-0.9.5.min.js"></script>
<script type="text/javascript" src="webgl-utils.js"></script>

<script type="text/javascript" src="gl-matrix/common.js"></script>
<script type="text/javascript" src="gl-matrix/mat2.js"></script>
<script type="text/javascript" src="gl-matrix/mat2d.js"></script>
<script type="text/javascript" src="gl-matrix/mat3.js"></script>
<script type="text/javascript" src="gl-matrix/mat4.js"></script>
<script type="text/javascript" src="gl-matrix/quat.js"></script>
<script type="text/javascript" src="gl-matrix/vec2.js"></script>
<script type="text/javascript" src="gl-matrix/vec3.js"></script>
<script type="text/javascript" src="gl-matrix/vec4.js"></script>

<script id="shader-fs" type="x-shader/x-fragment">
    precision mediump float;

    varying vec2 vTextureCoord;

    uniform sampler2D uSampler;

    void main(void) {
        gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));
    }
</script>

<script id="shader-vs" type="x-shader/x-vertex">
    attribute vec3 aVertexPosition;
    attribute vec2 aTextureCoord;

    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;

    varying vec2 vTextureCoord;

    void main(void) {
        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
        vTextureCoord = aTextureCoord;
    }
</script>


<script type="text/javascript">

    var gl;

    function initGL(canvas) {
        try {
            gl = canvas.getContext("experimental-webgl");
            gl.viewportWidth = canvas.width;
            gl.viewportHeight = canvas.height;
        } catch (e) {
        }
        if (!gl) {
            alert("Could not initialise WebGL, sorry :-(");
        }
    }


    function getShader(gl, id) {
        var shaderScript = document.getElementById(id);
        if (!shaderScript) {
            return null;
        }

        var str = "";
        var k = shaderScript.firstChild;
        while (k) {
            if (k.nodeType == 3) {
                str += k.textContent;
            }
            k = k.nextSibling;
        }

        var shader;
        if (shaderScript.type == "x-shader/x-fragment") {
            shader = gl.createShader(gl.FRAGMENT_SHADER);
        } else if (shaderScript.type == "x-shader/x-vertex") {
            shader = gl.createShader(gl.VERTEX_SHADER);
        } else {
            return null;
        }

        gl.shaderSource(shader, str);
        gl.compileShader(shader);

        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            alert(gl.getShaderInfoLog(shader));
            return null;
        }

        return shader;
    }


    var shaderProgram;

    function initShaders() {
        var fragmentShader = getShader(gl, "shader-fs");
        var vertexShader = getShader(gl, "shader-vs");

        shaderProgram = gl.createProgram();
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);

        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
            alert("Could not initialise shaders");
        }

        gl.useProgram(shaderProgram);

        shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
        gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

        shaderProgram.textureCoordAttribute = gl.getAttribLocation(shaderProgram, "aTextureCoord");
        gl.enableVertexAttribArray(shaderProgram.textureCoordAttribute);

        shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
        shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
        shaderProgram.samplerUniform = gl.getUniformLocation(shaderProgram, "uSampler");
    }


    function handleLoadedTexture(texture) {
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.image);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);

        gl.bindTexture(gl.TEXTURE_2D, null);
    }


    var mudTexture;

    function initTexture() {
        mudTexture = gl.createTexture();
        mudTexture.image = new Image();
        mudTexture.image.onload = function () {
            handleLoadedTexture(mudTexture)
        }

        mudTexture.image.src = "wall2.png";
    }


    var mvMatrix = mat4.create();
    var mvMatrixStack = [];
    var pMatrix = mat4.create();

    function mvPushMatrix() {
        var copy = mat4.create();
        mat4.set(mvMatrix, copy);
        mvMatrixStack.push(copy);
    }

    function mvPopMatrix() {
        if (mvMatrixStack.length == 0) {
            throw "Invalid popMatrix!";
        }
        mvMatrix = mvMatrixStack.pop();
    }


    function setMatrixUniforms() {
        gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
        gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvMatrix);
    }


    function degToRad(degrees) {
        return degrees * Math.PI / 180;
    }



    var currentlyPressedKeys = {};

    function handleKeyDown(event) {
        currentlyPressedKeys[event.keyCode] = true;
    }


    function handleKeyUp(event) {
        currentlyPressedKeys[event.keyCode] = false;
    }


    var pitch = 0;
    var pitchRate = 0;

    var yaw = 0;
    var yawRate = 0;

    var xPos = 0;
    var yPos = 0.4;
    var zPos = 0;

    var speed = 0;

    function handleKeys() {
        if (currentlyPressedKeys[33]) {
            // Page Up
            pitchRate = 0.1;
        } else if (currentlyPressedKeys[34]) {
            // Page Down
            pitchRate = -0.1;
        } else {
            pitchRate = 0;
        }

        if (currentlyPressedKeys[37] || currentlyPressedKeys[65]) {
            // Left cursor key or A
            yawRate = 0.1;
        } else if (currentlyPressedKeys[39] || currentlyPressedKeys[68]) {
            // Right cursor key or D
            yawRate = -0.1;
        } else {
            yawRate = 0;
        }

        if (currentlyPressedKeys[38] || currentlyPressedKeys[87]) {
            // Up cursor key or W
            speed = 0.003;
        } else if (currentlyPressedKeys[40] || currentlyPressedKeys[83]) {
            // Down cursor key
            speed = -0.003;
        } else {
            speed = 0;
        }

    }


    var worldVertexPositionBuffer = null;
    var worldVertexTextureCoordBuffer = null;
    var vertexPositions = [];
    var vertexCount = 0;

    function handleLoadedWorld(data) {
        var lines = data.split("\n");
        
        var vertexTextureCoords = [];
        for (var i in lines) {
            var vals = lines[i].replace(/^\s+/, "").split(/\s+/);
            if (vals.length == 5 && vals[0] != "//") {
                // It is a line describing a vertex; get X, Y and Z first
                vertexPositions.push(parseFloat(vals[0]));
                vertexPositions.push(parseFloat(vals[1]));
                vertexPositions.push(parseFloat(vals[2]));

                // And then the texture coords
                vertexTextureCoords.push(parseFloat(vals[3]));
                vertexTextureCoords.push(parseFloat(vals[4]));

                vertexCount += 1;
            }
        }

        worldVertexPositionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, worldVertexPositionBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexPositions), gl.STATIC_DRAW);
        worldVertexPositionBuffer.itemSize = 3;
        worldVertexPositionBuffer.numItems = vertexCount;

        worldVertexTextureCoordBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, worldVertexTextureCoordBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexTextureCoords), gl.STATIC_DRAW);
        worldVertexTextureCoordBuffer.itemSize = 2;
        worldVertexTextureCoordBuffer.numItems = vertexCount;

        document.getElementById("loadingtext").textContent = "";
    }


    function loadWorld() {
        var request = new XMLHttpRequest();
        request.open("GET", "world.txt");
        request.onreadystatechange = function () {
            if (request.readyState == 4) {
                handleLoadedWorld(request.responseText);
            }
        }
        request.send();
    }


    // From the camera, take a plane 90deg from the angle that the camera is pointing in.
    // From this point, and along this plane, spew raws at 5deg intervals.
    //
    // Alternatively, create rays from the origin using hte 5 deg interval, and then rotate 
    // and translate them all until they run parallel to this plane from the center of the camera.
    //
    // For each ray, find the position and distance to the first collision point. 
    function spew_rays()
    {
        // For each ray, we need x and y coordinates of the end point.
        // Imagine each ray is 1000 units long for now.  
    }


    function draw_rays()
    {

    }


    function ray_intersects_vertices(vecs, vertex_count, center_vec, ray, vout)
    {
        if (vertex_count == 3) return false;

        triangle = [];
        for (var i = 0; i < vertex_count; i += 1)
        {
            triangle[0] = center;
            triangle[1] = vecs[i];
            triangle[2] = vecs[(i+1) % vertex_count];

            if (ray_intersects_triangle(triangle, ray, vector))
                return true;
        }

        return false;
    }


    // a and b are vectors.
    function cross(a, b)
    {
        aa = a.values;
        bb = b.values;
        return new vec3(aa[1] * bb[2] - aa[2] * bb[1],
                        aa[2] * bb[0] - aa[0] * bb[2],
                        aa[0] * bb[1] - aa[1] * bb[0]);
    }


    // a and b are vectors.
    function dot(a, b)
    {
        aa = a.values;
        bb = b.values;
        return aa[0] * bb[0] + aa[1] * bb[1] + aa[2] * bb[2];
    }


    function vec3(x, y, z) {
        this.values = [x, y, z];
    }


    vec3.prototype.vec = function (x, y, z) {
        this.values = [x, y, z];
    };


    vec3.prototype.zero = function() {
        values = [0, 0, 0];
    };


    // result of a - b
    vec3.prototype.minus = function (b) {
        return new vec3(this.values[0] - b.values[0],
                        this.values[1] - b.values[1],
                        this.values[2] - b.values[2]);
    };


    vec3.prototype.add = function(b) {
        return new vec3(this.values[0] + b.values[0],
                        this.values[1] + b.values[1],
                        this.values[2] + b.values[2]);
    };


    vec3.prototype.mult = function(rhs) {
        return new vec3(this.values[0] * rhs,
                        this.values[1] * rhs,
                        this.values[2] * rhs);
    };


    vec3.prototype.equals = function(rhs) {
        return (this.values[0] == rhs.values[0]
                && this.values[1] == rhs.values[1]
                && this.values[2] == rhs.values[2]);
    };


    function triangle(a, b, c) {
        this.vertices = [a, b, c];
    }


    triangle.prototype.triangle = function (a, b, c) {
        this.vertices = [a, b, c];
    };


    var nullVec3 = new vec3(-999999, -999999, -999999);

    // Adapted from algorithm 6 from softsurfer.com
    function ray_intersects_triangle(triangle, ray_start, ray_end)
    {
        var vertices = triangle.vertices;

        var u = vertices[2].minus(vertices[0]);
        var v = vertices[1].minus(vertices[0]);
        var n = cross(u, v);

        var dir = ray_end.minus(ray_start);
        var w0 = ray_start.minus(vertices[0]);

        var a = -dot(n, w0)
        var b = dot(n, dir)
        
        if (isNaN(b) || Math.abs(b) < 0.0000001)
        {
            return nullVec3;
        }
        
        // Get intersected point of ray with triangles plane
        var r = a / b;
        if (r < 0.0) {
            return nullVec3;
        }
        
        dir = dir.mult(r);
        vOut = ray_start.add(dir);
        
        var uu = dot(u, u);
        var uv = dot(u, v);
        var vv = dot(v, v);

        var w = vOut.minus(vertices[0]);
        var wu = dot(w, u);
        var wv = dot(w, v);

        var D = (uv * uv) - (uu * vv);
        var s = (uv * wv - vv * wu) / D;
        var t = (uv * wu - uu * wv) / D;

        if (s < 0.0 || s > 1.0) {
            return nullVec3;
        }

        if (t < 0.0 || (s + t) > 1.0) {
            return nullVec3;
        }
        
        return vOut;
    }


    function drawScene() {
        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

        if (worldVertexTextureCoordBuffer == null || worldVertexPositionBuffer == null) {
            return;
        }

        mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);

        mat4.identity(mvMatrix);

        mat4.rotate(mvMatrix, degToRad(-pitch), [1, 0, 0]);
        mat4.rotate(mvMatrix, degToRad(-yaw), [0, 1, 0]);
        mat4.translate(mvMatrix, [-xPos, -yPos, -zPos]);

        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, mudTexture);
        gl.uniform1i(shaderProgram.samplerUniform, 0);

        gl.bindBuffer(gl.ARRAY_BUFFER, worldVertexTextureCoordBuffer);
        gl.vertexAttribPointer(shaderProgram.textureCoordAttribute, worldVertexTextureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);

        gl.bindBuffer(gl.ARRAY_BUFFER, worldVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, worldVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);

        setMatrixUniforms();
        gl.drawArrays(gl.TRIANGLES, 0, worldVertexPositionBuffer.numItems);
    }


    var lastTime = 0;
    // Used to make us "jog" up and down as we move forward.
    var joggingAngle = 0;

    function animate() {
        var timeNow = new Date().getTime();
        if (lastTime != 0) {
            var elapsed = timeNow - lastTime;

            if (speed != 0) {
                xPos -= Math.sin(degToRad(yaw)) * speed * elapsed;
                zPos -= Math.cos(degToRad(yaw)) * speed * elapsed;

                //joggingAngle += elapsed * 0.6; // 0.6 "fiddle factor" - makes it feel more realistic :-)
                //yPos = Math.sin(degToRad(joggingAngle)) / 20 + 0.4
            }

            yaw += yawRate * elapsed;
            pitch += pitchRate * elapsed;

        }
        lastTime = timeNow;
    }


    function tick() {
        requestAnimFrame(tick);
        handleKeys();
        drawScene();
        animate();
    }


    function handleMouseUp() {
        var verts = vertexPositions
        var r1 = new vec3(xPos, yPos, zPos)

        var r2 = new vec3(xPos + (1000 * (Math.cos(degToRad(-yaw)))), 
                          yPos + (1000 * (Math.sin(degToRad(-yaw)))), 
                          zPos)

        for (var i = 0; i < vertexCount - 9; i += 9) {
            var a = new vec3(verts[i],   verts[i+1], verts[i+2]);
            var b = new vec3(verts[i+3], verts[i+4], verts[i+5]);
            var c = new vec3(verts[i+6], verts[i+7], verts[i+8]);

            var t =  new triangle(a, b, c);

            var intersection = ray_intersects_triangle(t, r1, r2);
            if (!intersection.equals(nullVec3)) {
                alert(intersection.values);
            }
        }
    }



    function webGLStart() {
        var canvas = document.getElementById("lesson10-canvas");
        initGL(canvas);
        initShaders();
        initTexture();
        loadWorld();

        gl.clearColor(0.0, 0.0, 0.0, 1.0);
        gl.enable(gl.DEPTH_TEST);

        document.onkeydown = handleKeyDown;
        document.onkeyup = handleKeyUp;
        document.onmouseup = handleMouseUp;

        tick();
    }

</script>

<style type="text/css">
    #loadingtext {
        position:absolute;
        top:250px;
        left:150px;
        font-size:2em;
        color: white;
    }
</style>



</head>


<body onload="webGLStart();">
    <div id="whatever"></span><br />
    <canvas id="lesson10-canvas" style="border: none;" width="1024" height="768"></canvas>

    <div id="loadingtext">Loading world...</div>

    <br/>
    Use the cursor keys or WASD to run around, and <code>Page Up</code>/<code>Page Down</code> to
look up and down.
</body>

</html>
